version: '3.2'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
 
  kafka:
    image: wurstmeister/kafka:latest
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    ports:
      - target: 9094
        published: 9094
        protocol: tcp
        mode: host
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    healthcheck:
      test:
        ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 10s
      retries: 4
      
  mongodb:
    image: mongo:latest
    container_name: 'mongodb'

    ports:
    - 27017-27019:27017-27019
    # command: --smallfiles
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: test

    volumes:
      - 'mongodb_data:/bitnami/mongodb'

  producer-service:
    image: private.registry.io/library-producer:latest
    ports:
      - "8080:8080"
    depends_on:
      - zookeeper
      - kafka
      - mongodb
    deploy:
      placement:
        constraints:
          - "node.role!=manager"
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator"]
      interval: 30s
      timeout: 10s
      retries: 5 
    
  
  consumer-service:
    image: private.registry.io/library-consumer:latest
    ports:
      - "8083:8080"
    depends_on:
      - zookeeper
      - kafka
      - mongodb
      - producer-service
    deploy:
      placement:
        constraints:
          - "node.role!=manager"
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator"]
      interval: 30s
      timeout: 10s
      retries: 5 

  mongo-consumer-service:
    image: private.registry.io/mongo-comsumer:latest
    ports:
      - "8082:8080"
    depends_on:
      - zookeeper
      - kafka
      - mongodb
      - producer-service
    deploy:
      placement:
        constraints:
          - "node.role!=manager"
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator"]
      interval: 30s
      timeout: 10s
      retries: 5 

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongodb
volumes: 
  mongodb_data:
    driver: local

